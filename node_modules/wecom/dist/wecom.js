"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wecom = void 0;
var axios_1 = __importDefault(require("axios"));
var globalConfig = {
    // 企业微信corpid
    corpId: null,
    // 企业微信corpsecret
    corpSecret: null,
    // 企业微信服务器地址
    baseURL: "https://qyapi.weixin.qq.com/cgi-bin/",
    // 认证失败的错误重试次数 其他错误信息不进行重试
    retryTimes: 3,
};
var retry = function (handler, times) {
    if (times === void 0) { times = 3; }
    return new Promise(function (resolve, reject) {
        handler()
            .then(resolve)
            .catch(function (e) {
            times > 0 ? retry(handler, --times) : reject(e);
        });
    });
};
/**
 * @description 企业微信Node Api
 * @export
 * @class Wecom
 */
var Wecom = /** @class */ (function () {
    /**
     * Creates an instance of Wecom.
     * @param {Partial<WecomConfig>} config 企业微信基本配置信息
     * @memberof Wecom
     */
    function Wecom(config) {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.api = {};
        this.config = __assign(__assign({}, globalConfig), config);
        // 对参数做一些简单的校验 如果必要的参数不完整的话 直接抛出异常
        for (var _i = 0, _a = Object.entries(this.config); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!value) {
                throw new Error(key + " should not be " + value);
            }
        }
        // 创建请求的客户端
        this.client = axios_1.default.create({
            baseURL: this.config.baseURL,
            validateStatus: function () {
                return true;
            },
            params: {},
        });
        // 拦截器添加access_token
        this.client.interceptors.request.use(function (config) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(config.url !== "/gettoken")) return [3 /*break*/, 3];
                        if (!!this._token) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getToken()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        config.params["access_token"] = this._token;
                        _a.label = 3;
                    case 3: return [2 /*return*/, config];
                }
            });
        }); }, Promise.reject);
        // 如果认证失败的话 尝试重新获取token然后重试
        this.client.interceptors.response.use(function (response) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (response.data.errcode === 40014 // 认证失败
                ) {
                    this._token = null;
                    throw new axios_1.default.Cancel("TOKENERROR");
                }
                else {
                    return [2 /*return*/, response];
                }
                return [2 /*return*/];
            });
        }); }, function (error) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (error.response &&
                    // 认证失败
                    error.response.status === 401) {
                    this._token = null;
                    return [2 /*return*/, this.client.request(error.config)];
                }
                return [2 /*return*/, Promise.reject(error)];
            });
        }); });
    }
    /**
     * @description 设置全局配置
     * @static
     * @param {Partial<WecomConfig>} config
     * @memberof Wecom
     */
    Wecom.setGlobal = function (config) {
        Object.assign(globalConfig, config);
    };
    /**
     * @description 获取接口请求所需的token
     * @return {*}  {Promise<string>}
     * @memberof Wecom
     */
    Wecom.prototype.getToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("/gettoken", {
                            params: {
                                corpid: this.config.corpId,
                                corpsecret: this.config.corpSecret,
                            },
                        })];
                    case 1:
                        data = (_a.sent()).data;
                        if (!data.access_token) {
                            throw new Error(data.errmsg);
                        }
                        return [2 /*return*/, (this._token = data.access_token)];
                }
            });
        });
    };
    /**
     * @description 发送企业微信请求
     * @template T
     * @template R
     * @param {AxiosRequestConfig} config 配置参数和axios的参数保持一致
     * @return {*}  {Promise<R>}
     * @memberof Wecom
     */
    Wecom.prototype.request = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var doRequest;
            var _this = this;
            return __generator(this, function (_a) {
                doRequest = function () {
                    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            this.client.request(config).then(resolve).catch(reject);
                            return [2 /*return*/];
                        });
                    }); });
                };
                return [2 /*return*/, retry(doRequest, this.config.retryTimes)];
            });
        });
    };
    /**
     * @description 添加API
     * @template T
     * @param {string} path
     * @param {() => T} fn
     * @return {*}  {Wecom}
     * @memberof Wecom
     */
    Wecom.prototype.createApi = function (path, fn) {
        var currentPath = this.api;
        var pathArr = path.split(".");
        while (pathArr.length) {
            var key = pathArr.shift();
            // 如果已经到了最后一位
            if (pathArr.length === 0) {
                // 查询是否已经在当前的命名空间下有内容
                if (currentPath[key]) {
                    throw new Error("Path Conflic");
                }
                currentPath[key] = fn.bind(this);
            }
            else {
                // 添加命名空间
                currentPath[key] = currentPath[key] || {};
                currentPath = currentPath[key];
            }
        }
        return this;
    };
    return Wecom;
}());
exports.Wecom = Wecom;
