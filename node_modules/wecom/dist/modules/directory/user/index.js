"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
var wecom_1 = require("../../../wecom");
var User = /** @class */ (function (_super) {
    __extends(User, _super);
    function User(config) {
        return _super.call(this, config) || this;
    }
    /**
     * @description 创建成员
     * @param {IUserCreateDto} user
     * @return {*}  {Promise<AxiosResponse<BaseRet>>}
     * @memberof User
     */
    User.prototype.create = function (user) {
        return this.request({
            url: "user/create",
            method: "POST",
            data: user,
        });
    };
    /**
     * @description 读取成员
     * @param {string} userid
     * @return {*}  {Promise<AxiosResponse<UserRet>>}
     * @memberof User
     */
    User.prototype.get = function (userid) {
        return this.request({
            url: "user/get",
            method: "GET",
            params: {
                userid: userid,
            },
        });
    };
    /**
     * @description 更新成员
     * @param {IUserUpdateDto} user
     * @return {*}  {Promise<AxiosResponse<BaseRet>>}
     * @memberof User
     */
    User.prototype.update = function (user) {
        return this.request({
            url: "user/update",
            method: "POST",
            data: user,
        });
    };
    /**
     * @description 删除成员
     * @param {string} userid 成员UserID。对应管理端的帐号
     * @return {*}  {Promise<AxiosResponse<BaseRet>>}
     * @memberof User
     */
    User.prototype.delete = function (userid) {
        return this.request({
            url: "user/delete",
            method: "GET",
            params: {
                userid: userid,
            },
        });
    };
    /**
     * @description 批量删除成员
     * @param {string[]} useridlist
     * @return {*}  {Promise<AxiosResponse<BaseRet>>}
     * @memberof User
     */
    User.prototype.batchDelete = function (useridlist) {
        return this.request({
            url: "user/batchdelete",
            method: "POST",
            data: {
                useridlist: useridlist,
            },
        });
    };
    /**
     * @description 获取部门成员
     * @param {number} department_id 获取的部门id
     * @param {ZeroOrOne} [fetch_child=0] 是否递归获取子部门下面的成员：1-递归获取，0-只获取本部门
     * @return {*}  {Promise<AxiosResponse<UserSampleListRet>>}
     * @memberof User
     */
    User.prototype.simpleList = function (department_id, fetch_child) {
        if (fetch_child === void 0) { fetch_child = 0; }
        return this.request({
            url: "user/simplelist",
            method: "GET",
            params: {
                department_id: department_id,
                fetch_child: fetch_child,
            },
        });
    };
    /**
     * @description 获取部门成员详情？
     * @template T
     * @param {number} department_id 部门ID
     * @param {ZeroOrOne} [fetch_child=0] 是否递归获取子部门下面的成员：1-递归获取，0-只获取本部门
     * @param {ZeroOrOne} [simple=0] 是否只是要获取详情 默认需要 不需要的情况下 和simpleList方法一致
     * @return {*}  {Promise<AxiosResponse<T>>}
     * @memberof User
     */
    User.prototype.list = function (department_id, fetch_child, simple) {
        if (fetch_child === void 0) { fetch_child = 0; }
        if (simple === void 0) { simple = 0; }
        return this.request({
            url: "user/" + (simple === 0 ? "" : "simple") + "list",
            method: "GET",
            params: {
                department_id: department_id,
                fetch_child: fetch_child,
            },
        });
    };
    /**
     * @description userid与openid互换
     * @param {string} userid  企业内的成员id
     * @return {*}  {Promise<AxiosResponse<ConvertToOpenIdRet>>}
     * @memberof User
     */
    User.prototype.convertToOpenid = function (userid) {
        return this.request({
            url: "user/convert_to_openid",
            method: "POST",
            data: {
                userid: userid,
            },
        });
    };
    /**
     * @description 二次验证
     * @param {string} userid
     * @return {*}  {Promise<AxiosResponse<BaseRet>>}
     * @memberof User
     */
    User.prototype.authSucc = function (userid) {
        return this.request({
            url: "user/authsucc",
            method: "GET",
            params: {
                userid: userid,
            },
        });
    };
    /**
     * @description 邀请成员
     * @param {IUserInvite} data
     * @return {*}  {Promise<AxiosResponse<InviteRet>>}
     * @memberof User
     */
    User.prototype.invite = function (data) {
        return this.request({
            url: "batch/invite",
            method: "POST",
            data: data,
        });
    };
    /**
     * @description 获取加入企业二维码
     * @param {QrCodeSizeType} size_type qrcode尺寸类型，1: 171 x 171; 2: 399 x 399; 3: 741 x 741; 4: 2052 x 2052
     * @return {*}  {Promise<AxiosResponse<GetJoinQrCodeRet>>}
     * @memberof User
     */
    User.prototype.getJoinQrCode = function (size_type) {
        return this.request({
            url: "corp/get_join_qrcode",
            method: "GET",
            params: {
                size_type: size_type,
            },
        });
    };
    /**
     * @description 获取企业活跃成员数
     * @param {string} date 具体某天的活跃人数，最长支持获取30天前数据
     * @return {*}  {Promise<AxiosResponse<GetActiveStatRet>>}
     * @memberof User
     */
    User.prototype.getActiveStat = function (date) {
        return this.request({
            url: "user/get_active_stat",
            method: "POST",
            data: {
                date: date,
            },
        });
    };
    return User;
}(wecom_1.Wecom));
exports.User = User;
