import { AxiosResponse } from "axios";
import { BaseRet, ZeroOrOne } from "../../../common/interface";
import { QrCodeSizeType } from "../../../common/interface";
import { Wecom, WecomConfig } from "../../../wecom";
import { IUserCreateDto, UserRet, IUserUpdateDto, UserSampleListRet, UserListRet, ConvertToOpenIdRet, IUserInvite, InviteRet, GetJoinQrCodeRet, GetActiveStatRet } from "./interface";
export declare class User extends Wecom {
    constructor(config: Partial<WecomConfig>);
    /**
     * @description 创建成员
     * @param {IUserCreateDto} user
     * @return {*}  {Promise<AxiosResponse<BaseRet>>}
     * @memberof User
     */
    create(user: IUserCreateDto): Promise<AxiosResponse<BaseRet>>;
    /**
     * @description 读取成员
     * @param {string} userid
     * @return {*}  {Promise<AxiosResponse<UserRet>>}
     * @memberof User
     */
    get(userid: string): Promise<AxiosResponse<UserRet>>;
    /**
     * @description 更新成员
     * @param {IUserUpdateDto} user
     * @return {*}  {Promise<AxiosResponse<BaseRet>>}
     * @memberof User
     */
    update(user: IUserUpdateDto): Promise<AxiosResponse<BaseRet>>;
    /**
     * @description 删除成员
     * @param {string} userid 成员UserID。对应管理端的帐号
     * @return {*}  {Promise<AxiosResponse<BaseRet>>}
     * @memberof User
     */
    delete(userid: string): Promise<AxiosResponse<BaseRet>>;
    /**
     * @description 批量删除成员
     * @param {string[]} useridlist
     * @return {*}  {Promise<AxiosResponse<BaseRet>>}
     * @memberof User
     */
    batchDelete(useridlist: string[]): Promise<AxiosResponse<BaseRet>>;
    /**
     * @description 获取部门成员
     * @param {number} department_id 获取的部门id
     * @param {ZeroOrOne} [fetch_child=0] 是否递归获取子部门下面的成员：1-递归获取，0-只获取本部门
     * @return {*}  {Promise<AxiosResponse<UserSampleListRet>>}
     * @memberof User
     */
    simpleList(department_id: number, fetch_child?: ZeroOrOne): Promise<AxiosResponse<UserSampleListRet>>;
    /**
     * @description 获取部门成员详情？
     * @template T
     * @param {number} department_id 部门ID
     * @param {ZeroOrOne} [fetch_child=0] 是否递归获取子部门下面的成员：1-递归获取，0-只获取本部门
     * @param {ZeroOrOne} [simple=0] 是否只是要获取详情 默认需要 不需要的情况下 和simpleList方法一致
     * @return {*}  {Promise<AxiosResponse<T>>}
     * @memberof User
     */
    list<T = UserListRet>(department_id: number, fetch_child?: ZeroOrOne, simple?: ZeroOrOne): Promise<AxiosResponse<T>>;
    /**
     * @description userid与openid互换
     * @param {string} userid  企业内的成员id
     * @return {*}  {Promise<AxiosResponse<ConvertToOpenIdRet>>}
     * @memberof User
     */
    convertToOpenid(userid: string): Promise<AxiosResponse<ConvertToOpenIdRet>>;
    /**
     * @description 二次验证
     * @param {string} userid
     * @return {*}  {Promise<AxiosResponse<BaseRet>>}
     * @memberof User
     */
    authSucc(userid: string): Promise<AxiosResponse<BaseRet>>;
    /**
     * @description 邀请成员
     * @param {IUserInvite} data
     * @return {*}  {Promise<AxiosResponse<InviteRet>>}
     * @memberof User
     */
    invite(data: IUserInvite): Promise<AxiosResponse<InviteRet>>;
    /**
     * @description 获取加入企业二维码
     * @param {QrCodeSizeType} size_type qrcode尺寸类型，1: 171 x 171; 2: 399 x 399; 3: 741 x 741; 4: 2052 x 2052
     * @return {*}  {Promise<AxiosResponse<GetJoinQrCodeRet>>}
     * @memberof User
     */
    getJoinQrCode(size_type: QrCodeSizeType): Promise<AxiosResponse<GetJoinQrCodeRet>>;
    /**
     * @description 获取企业活跃成员数
     * @param {string} date 具体某天的活跃人数，最长支持获取30天前数据
     * @return {*}  {Promise<AxiosResponse<GetActiveStatRet>>}
     * @memberof User
     */
    getActiveStat(date: string): Promise<AxiosResponse<GetActiveStatRet>>;
}
