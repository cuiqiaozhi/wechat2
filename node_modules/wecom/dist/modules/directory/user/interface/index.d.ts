import { BaseRet } from "../../../../common/interface";
export interface IAttrBase {
    type: 0 | 1 | 2;
    name: string;
}
export interface IAttrText {
    type: 0;
    text: {
        value: string;
    };
}
export interface IAttrWeb {
    type: 1;
    web: {
        url: string;
        title: string;
    };
}
export interface IAttrMiniprogram {
    type: 2;
    miniprogram: {
        appid: string;
        pagepath: string;
        title: string;
    };
}
export declare type IAttr = IAttrText | IAttrWeb | IAttrMiniprogram;
export interface IUserBase {
    userid: string;
    name?: string;
    alias?: string;
    department?: number[];
    order?: number[];
    position?: string;
    mobile?: string;
    gender?: "0" | "1" | "2";
    email?: string;
    is_leader_in_dept?: number[];
    telephone?: string;
    address?: string;
    extattr?: {
        attrs: Array<IAttr>;
    };
    main_department?: number;
    external_position?: string;
    external_profile?: {
        external_corp_name: string;
        external_attr: Array<IAttr>;
    };
}
export interface IUser extends IUserBase {
    avatar?: string;
    thumb_avatar?: string;
    open_userid: string;
    status: 1 | 2 | 4 | 5;
    qrcode: string;
}
export interface IUserUpdateDto extends IUserBase {
    enable?: 0 | 1;
    avatar_mediaid?: string;
    to_invite?: boolean;
}
export interface IUserCreateDto extends IUserUpdateDto {
    department: number[];
    name: string;
}
export interface UserRet extends IUser, BaseRet {
}
export interface ISampleUser {
    userid: string;
    name: string;
    department: number[];
    open_userid: string;
}
export interface UserSampleListRet extends BaseRet {
    userlist: ISampleUser[];
}
export interface UserListRet extends BaseRet {
    userlist: IUser[];
}
export interface ConvertToOpenIdRet extends BaseRet {
    openid: string;
}
export interface IUserInvite {
    user?: string[];
    party?: number[];
    tag?: number[];
}
export interface InviteRet extends BaseRet {
    invaliduser?: string[];
    invalidparty?: number[];
    invalidtag?: number[];
}
export interface GetJoinQrCodeRet extends BaseRet {
    join_qrcode: string;
}
export interface GetActiveStatRet extends BaseRet {
    active_cnt: number;
}
